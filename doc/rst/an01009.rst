########################################################################
AN01009: Optimising USB Audio for stereo output, battery powered devices
########################################################################

This application note characterises the expected power usage of the XMOS
USB Audio reference design running on an `xcore.ai` device, configured for
stereo-out applications. This document then outlines optional changes
to the hardware and software, with the goal of reducing power consumption.

This application note assumes that the design comprises an `XMOS` device to
interface to an external DAC over I²S to USB.

The USB Audio reference design is optimised for performance, configurability,
and low resource usage. The standard reference design
running on the `xcore.ai` device comfortably fits within the USB bus power envelope,
leaving plenty of power available for supporting components and audio CODECs.

When powering systems from a battery, a fixed amount of energy is available.
Reducing power dissipation allows the designer to either increase battery life or maintain the same
battery life with a smaller battery, resulting in cost and form factor savings.
By making different design choices and optimising the original `XMOS` USB Audio reference design,
various power-saving techniques can be applied to achieve these goals

This application note assumes that the reader is familiar with the
`The XS3 architecture manual <https://www.xmos.com/?s=XM-014007-PS>`_
and the `XMOS USB Audio reference design. <https://www.xmos.com/develop/usb-multichannel-audio/>`_

The described and provided application executes on the `XK-AUDIO-316-MC` board. This note concerns
itself with reducing the power consumption of the `xcore.ai` device only, not whole board power
reductions.

.. warning::

    Whilst application note describes steps for reducing power on a `XK-AUDIO-316-MC`
    board since it is readily and commercially available. However, this hardware arrangement of this
    board does not lend itself to an ideal low power configuration. Compromises made and details of
    an ideal configuration are detailed in this document.

********
Overview
********

The power measurements have been made using the following test harness:

- The `XK-AUDIO-316-MC` board. This board has a jumper (J24)
  over which the 5V supply to the core power supply can be monitored. Note
  that this excludes 5V supply to 3V3 and 1V8 pins.

- XMOS USB Audio library ``lib_xua``. The version used was 5.0.0.

- Host: HP ProBook 430 G7 running Windows 11 23H2.

A diagram of the chip power measurement method is shown :numref:`fig_power_setup`. There are
multiple power domains within the `xcore.ai` device. In this application, all
power originates from USB `VBUS`, and is consumed as core power (0.9V nominal),
1.8V analog (for USB), 3.3V analog (for USB), and either 1.8 or 3.3V for
digital I/O. It is assumed that DC-DC converters with a reasonable
efficiency (not LDOs) are used.

The core voltage power consumption in the 5V domain is measured; the power
consumption of the other supplies is estimated.

.. _fig_power_setup:

.. figure:: ../images/power-setup.*
            :width: 50%

            Test setup

For each configuration, basic enumeration and playback was confirmed on Windows,
with power being easured during audio playback.



*******************
Example application
*******************

An accompanying example application (``app_an01009``) is provided along side this application note.

Building the example
====================

The application uses the `xcommon-cmake <https://www.xmos.com/file/xcommon-cmake-documentation/?version=latest>`_,
the `XMOS` build and dependency management system. `xcommon-cmake` is bundled with the XTC tools.

The ``an01009`` software zip-file should be downloaded and unzipped to a chosen directory.

To configure the build run the following from an XTC command prompt::

    cd an01009
    cd app_an01009
    cmake -G "Unix Makefiles" -B build

All required dependencies are included in the software download, however, if any are missing it is
at this configure step that they will be downloaded by the build system.

Finally, the application binary can be built using ``xmake``::

    xmake -j -C build

This command will cause a binary (.xe) to be generated in the `app_an01009/bin` directory,

Launching the example
=====================

From a XTC command prompt run the following command::

    xrun bin/app_an01009.xe

Once this command has executed the device should have enumerated on the host machine.

.. _sec_optimisations:

*************
Optimisations
*************

A number of different optimisations were applied to the reference design and their
impact was measured. These optimisations can be grouped into categories.

* **Reducing frequencies** Execute all the software to one physical tile.
  The `xcore` switch and other tile can both be slowed down. In this case, the frequency of core 0
  is reduced to 9 MHz.
  The hardware that is used for measuring power is suboptimal in this regard since the I²S and I²C
  buses are connected to two separate physical tiles. An extra 3 mW can be saved by switching the
  other tile off rather than just slowing it down.

* **XUD thread mode**  Disable `FAST` mode in ``XUD_Manager_loop`` in (``lib_xud``) and instead run the XUD thread in
  `HIGH PRIORITY` mode.

* **Using full-speed USB** Reduction of power by lowering the audio sample frequency to 48 kHz and use of full speed USB
  rather than high-speed. The latter is important as it affects the non-core power consumed.

**************
Implementation
**************

This section describes the steps taken to implement the changes outlined in :ref:`sec_optimisations`.

Reducing frequencies
====================

The provided source file ``src/extensions/power_down.xc`` contains a function which is run on
application startup to reduce the power consumption. It waits for ten seconds to
allow the application to start running and then it applies the optimisations.

The following clock divider reduces the System PLL frequency of 600 MHz to 120 MHz
for the switch:

.. literalinclude:: ../../app_an01009/src/extensions/power_down.xc
   :start-after: Reduce switch clock frequency
   :end-at: write_node_config_reg

The following clock divider reduces the System PLL frequency of 600 MHz to 9 MHz
for core 0, which is enabled by the write to the ``XS1_PS_XCORE_CTRL0`` register:

.. literalinclude:: ../../app_an01009/src/extensions/power_down.xc
   :start-after: Reduce core 0 clock frequency
   :end-at: setps

These optimisations can be enabled or disabled as required to test the power consumption
by adding or removing them in the ``power_down()`` function.

.. note::

   Due to the I/O arrangement of the `XK-AUDIO-316-MC` the choice is made to run the software on
   tile[1], a realistic design would choose to run on tile[0] due to the boot flash being connected
   to this tile - thus allowing DFU to operate etc.

XUD thread mode
===============

In `lib_xud/lib_xud/src/core/XUD_Main.xc`:

 .. literalinclude:: ../../../lib_xud/lib_xud/src/core/XUD_Main.xc
    :language: c
    :name: xud_thread_mode
    :start-at: set_thread_fast_mode_on
    :end-at: set_thread_fast_mode_off

 #. Remove the calls to both ``set_thread_fast_mode_on`` and ``set_thread_fast_mode_off``.

 #. Add ``-DXUD_PRIORITY_HIGH`` to the ``APP_COMPILER_FLAGS`` in the ``CMakeLists.txt`` file.

Using full-speed USB
====================

In `lib_xua/lib_xua/src/core/main.xc`, in the call to `XUD_Main()` replace the use of the variable
`usbSpeed` with ``XUD_SPEED_FS``.

 .. literalinclude:: ../../../lib_xua/lib_xua/src/core/main.xc
    :language: c
    :name: USB speed
    :start-at: USB interface
    :end-at: xudPwrCfg

|newpage|

******************
Power measurements
******************

I/O power
=========

I/O power is calculated to be as follows (note these have not yet been measured) for USB full-speed
and high-speed operation:

.. tabularcolumns:: lrr

========================= ======================= ======================
Current                   FSRX (12 Mbit/s)        HSRX (480 Mbit/s)
========================= ======================= ======================
IVCC33A                   11-40 uA (negligible)   1 mA (3 mW)
IVCC18A                   4-5 mA (7-9 mW)         8 mA (14 mW)
Oscillator, 1.8V          1 mW                    1 mW
I²S power                 0.5 mw                  0.5 mw
DC-DC efficiency          90%                     90%
**Total**                 **11 mW**               **22 mW**
========================= ======================= ======================

Comparison of optimisations
===========================

The tables below show the measured core power consumption of `xcore.ai` running USB Audio
reference design software with different optimisations. The calculated I/O power is added to get
the total power consumption value.

The `Configuration` column lists the core 0 and core 1 clock frequencies, followed by the
core voltage.


High-speed USB Audio Class 2.0 at 192 kHz
-----------------------------------------

.. tabularcolumns:: lrrr

============================= =========== ========== ========
Configuration                 Core Power  I/O Power  Total
============================= =========== ========== ========
600/600 MHz, 0.90V            220 mW       22 mW     242 mW
  9/600 MHz, 0.90V            162 mW       22 mW     184 mW
  9/600 MHz, 0.90V, HP [#f1]_ 118 mW       22 mW     140 mW
============================= =========== ========== ========


Full-speed USB Audio Class 2.0 at 48 kHz
----------------------------------------

.. tabularcolumns:: lrrr

============================= =========== ========== ========
Configuration                 Core Power  I/O Power  Total
============================= =========== ========== ========
600/600 MHz, 0.90V            216 mW       11 mW     227 mW
  9/600 MHz, 0.90V            163 mW       11 mW     174 mW
  9/600 MHz, 0.90V, HP        119 mW       11 mW     130 mW
============================= =========== ========== ========

.. [#f1] `XUD` running in a high priority thread

**************************************
Hardware for minimal power consumption
**************************************

This application measured the power on an `XK-AUDIO-316-MC` board, as that is commercially available
and has a 0.1 ohm resistor across the 5V input to the core power supply.

In order to build a design that uses minimal power the following steps should be taken, in order of
importance:

* Put all I/O on tile 0; in particular I²S and I²C, and build with tile 0 for I/O and ``lib_xud``.

* In the software switch off tile 1 upon booting (see ``power_down.xc``) [#f2]_.

* Use a DC-DC converter to generate 1.8V from 5V

* Use 1.8V I/O (for example the `QF60A` part)

* Use a DC-DC to generate 3.3V from 5V (power requirements on 3V3 are very little, so an LDO may
  be more efficient)

* Minimise power supply on USB suspend

.. [#f2] Note this does *not* effect the secondary PLL output pin muxed with IO pin `X1D11` of
   tile[1]

**********
Conclusion
**********

This application note shows how some simple design optimisations can be made to reduce overall
power consumption by approximately 40% compared with the baseline reference design.

***************
Further reading
***************

* `AN02022: xcore.ai Clock frequency control <www.xmos.com/file/an02022>`_

* `AN02023: xcore.ai Power consumption estimation <www.xmos.com/file/an02023>`_

* `XU316-1024-QF60A datasheet <https://www.xmos.com/?s=XM-014034-PC>`_

* `The XS3 architecture manual <https://www.xmos.com/?s=XM-014007-PS>`_
