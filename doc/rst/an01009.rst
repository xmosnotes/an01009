########################################################################
AN01009: Optimising USB Audio for stereo output, battery powered devices
########################################################################

This application note characterises the expected power usage of the XMOS
USB Audio reference design running on an `xcore.ai` device, configured for
stereo-out applications. This document then outlines optional changes
to the hardware and software, with the goal of reducing power consumption.

This application note assumes that the design comprises an `XMOS` device to
interface USB to an external DAC connected via I²S.

The USB Audio reference design is optimised for performance, configurability,
and low resource usage. The standard reference design
running on the `xcore.ai` device comfortably fits within the USB bus power envelope,
leaving plenty of power available for supporting components and audio CODECs.

When powering systems from a battery, a fixed amount of energy is available.
Reducing power dissipation allows the designer to either increase battery life or maintain the same
battery life with a smaller battery, resulting in cost and form factor savings.
By making different design choices and optimising the original `XMOS` USB Audio reference design,
various power-saving techniques can be applied to achieve these goals

This application note assumes that the reader is familiar with the
`The XS3 architecture manual <https://www.xmos.com/?s=XM-014007-PS>`_
and the `XMOS USB Audio reference design. <https://www.xmos.com/develop/usb-multichannel-audio/>`_

The described and provided application executes on the `XK-AUDIO-316-MC` board. This note concerns
itself with reducing the power consumption of the `xcore.ai` device only, not whole board power
reductions.

.. warning::

    This application note describes steps for reducing power on an `XK-AUDIO-316-MC`
    board since it is readily and commercially available. However, the hardware arrangement of this
    board does not lend itself to an ideal low power system configuration. Compromises made and details of
    an ideal configuration are detailed in this document.

********
Overview
********

The power measurements have been made using the following test harness:

- The `XK-AUDIO-316-MC` board. This board has a jumper (J24)
  over which the 5V supply to the core power supply which is the main power draw of the chip,
  upstream of the DC-DC converter, can be monitored. Note that this excludes 5V supply to 3V3 and 1V8 pins.

- XMOS USB Audio library ``lib_xua``. The version used was 5.0.0.

- Host: HP ProBook 430 G7 running Windows 11 23H2.

A diagram of the chip power measurement method is shown :numref:`fig_power_setup`. There are
multiple power domains within the `xcore.ai` device. In this application, all
power originates from USB `VBUS`, and is consumed as core power (0.9V nominal),
1.8V analog (for USB), 3.3V analog (for USB), and either 1.8 or 3.3V for
digital I/O. It is assumed that DC-DC converters with a reasonable
efficiency (not LDOs) are used.

The core voltage power consumption in the 5V domain is measured; the power
consumption of the other supplies is estimated.

.. _fig_power_setup:

.. figure:: ../images/power-setup.*
            :width: 50%

            Test setup

For each configuration, basic enumeration and playback was confirmed on Windows,
with power being measured during audio playback.



*******************
Example application
*******************

An accompanying example application (``app_an01009``) is provided along side this application note.

Two build configurations are provided; one with no power optimisations applied and one with all power
optimisations enabled, allowing the user to quickly compare the power of the baseline and optimised versions.

Individual power optimisations may be enabled and disabled by following the steps in the :ref:`sec_optimisations` section.

Building the example
====================

The application uses the `xcommon-cmake <https://www.xmos.com/file/xcommon-cmake-documentation/?version=latest>`_,
the `XMOS` build and dependency management system. `xcommon-cmake` is bundled with the XTC tools.

The ``an01009`` software zip-file should be downloaded and unzipped to a chosen directory.

To configure the build, run the following from an XTC command prompt::

    cd an01009
    cd app_an01009
    cmake -G "Unix Makefiles" -B build

All required dependencies are included in the software download, however, if any were missing it is
at this configure step that they will be downloaded by the build system.

Finally, the application binary can be built using ``xmake``::

    xmake -j -C build

This command will cause two binaries (.xe files) to be generated below the `app_an01009/bin` directory

Launching the example
=====================

From a XTC command prompt run the following command for the unoptimised firmware::

    xrun bin/std/app_an01009_std.xe

or for the low-power optimised firmware::

    xrun bin/lp/app_an01009_lp.xe



Once this command has executed the device should have enumerated on the host machine, and you may stream audio.

.. _sec_optimisations:

*************
Optimisations
*************

A number of different optimisations were applied to the reference design and their
impact was measured. These optimisations can be grouped into categories.

* **Reducing frequencies**
  Execute all the software on one physical tile.
  The `xcore` switch and other tile can both be slowed down. In this case, the frequency of tile[0]
  is reduced to 9 MHz which means it can still execute low speed tasks, such as I²C master.
  The hardware that is used for measuring power is suboptimal in this regard since the I²S and I²C
  buses are connected to two separate physical tiles. An extra 3 mW can be saved in a custom system by switching the other tile off rather than just slowing it down.

* **Event-based buffering**
  Ensure that as few instructions as possible are executed in the audio buffering subsystem
  by only checking shared memory variables when needed through use of a channel event. The define ``CHAN_BUFF_CTRL`` is
  provided in ``lib_xua`` which enables this feature.

* **XUD thread mode**
  Disable `FAST` mode in ``XUD_Manager_loop`` in (``lib_xud``) and instead run the XUD thread in
  `HIGH PRIORITY` mode which ensures it always receives 1/5 of the tile MIPS. For further information about the operation
  of thread modes please refer to :ref:`further reading section<further_reading>` where you can find an appnote on this subject.

* **Audio shutdown when not streaming**
  By setting ``XUA_LOW_POWER_NON_STREAMING`` to 1 in the makefile, ``lib_xua`` supports shutting down of
  the audiohub subsystem which includes I²S. An additional callback ``AudioHwDeInit()`` is enabled which allows the user to 
  configure external hardware (eg. DAC) into low-power mode further saving system power. In addition, the on-chip Application PLL may
  be disabled (if used) which further saves core power rail drawn by the `xcore`.

* **Using full-speed USB** Reduction of power through use of full speed USB rather than high-speed. This is important as it affects the PHY power consumed. ``lib_xua`` follows the standards and uses high-speed (480 Mbps) USB for Audio Class 2 and full-speed (12 Mbps) for Audio Class 1.

**************
Implementation
**************

This section describes the steps taken to implement the changes outlined in :ref:`sec_optimisations`.

Reducing frequencies
====================

The provided source file ``src/extensions/power_down.xc`` contains a function which is run on
application startup to reduce the power consumption. It waits for ten seconds to
allow the application to start running and then it applies the optimisations.

The following clock divider reduces the System PLL frequency of 600 MHz to 120 MHz
for the switch:

.. literalinclude:: ../../app_an01009/src/extensions/power_down.xc
   :start-at: Reduce switch clock frequency
   :end-at: write_node_config_reg

The following clock divider reduces the System PLL frequency of 600 MHz to 9 MHz
for tile[0], which is enabled by the write to the ``XS1_PS_XCORE_CTRL0`` register:

.. literalinclude:: ../../app_an01009/src/extensions/power_down.xc
   :start-after: Reduce core 0 clock frequency
   :end-at: setps

Choosing a slow, but still functional, tile speed of 9 MHz allows the I²C master task on that tile
to still function, albeit slowly, when making sample rate changes which require I²C configuration of the DAC.

If no functions are implemented in the unused tile then there is no reason not to enable this optimisation.

These optimisations can be enabled or disabled as required to test the power consumption
by adding or removing them in the ``power_down()`` function.

.. note::

   Due to the I/O arrangement of the `XK-AUDIO-316-MC` the choice is made to run the software on
   tile[1]. A realistic design would choose to run on tile[0] due to the boot flash being connected
   to this tile - thus allowing DFU to operate etc.


Event-based audio buffer
========================

By default, ``lib_xua`` uses a performance and resource optimised audio buffer. Part of this buffer 
consists of a polling loop which monitors shared-memory variables. This polling loop is always
executing instructions and therefore consumes power at all times.

``lib_xua`` includes an option to add a channel between the two buffer threads which consumes
two channel-ends but pauses the `decouple` thread until a shared-memory variable needs reading.
Blocking on a channel de-schedules the thread and therefore saves a useful amount of power.

Highly featured designs (especially those including digital inputs or outputs) may not have 
sufficient channel-end resources to implement this power-saving feature (resulting in a linker error)
however simpler designs such as DACs, microphones or headphones can safely enable this feature.

The following define in the application CMake file enables the event-based audio buffer::

    -DCHAN_BUFF_CTRL=1


XUD thread mode
===============

XUD normally sets ``set_thread_fast_mode_on()`` which improves IO timings in the core USB device library.
However it also increases power consumption because the thread is always scheduled, even when waiting on an event. In low-power
USB audio applications it can be acceptable to disable fast mode. 

The file ``xud_conf.h`` is included by ``lib_xud`` and you in that file define
a macro to remove the call to ``set_thread_fast_mode_on()``.

 .. literalinclude:: ../../app_an01009/src/extensions/xud_conf.h
    :language: c
    :name: xud_thread_mode
    :start-after: #ifdef LOW_POWER_ENABLE
    :end-before: #endif

In addition, to ensure that XUD always receives sufficient MIPS in the cases where more than 5 hardware threads
are used on the XUD tile, the following define is set in the ``CMakeLists.txt``::

    -DXUD_PRIORITY_HIGH=1

Please see the :ref:`further reading section<further_reading>` for more information regarding xcore thread modes.

Idle mode when not streaming
============================

By default ``lib_xua`` keeps I²S running even when audio is not streaming. This is useful when external systems rely on the
audio clocks or features such as the audio mixer need to keep operating. For some applications, it is preferable to stop I²S
and shutdown any associate audio hardware, which can be done using the following makefile setting::

    -DXUA_LOW_POWER_NON_STREAMING=1

The associated shutdown callback, which is enabled by this setting, can be seen populated for this application note below. Note ``lib_xua``
disables the I²S ports prior to this and the callback handler in this application then disables the Application PLL which disables MCLK generation.


 .. literalinclude:: ../../app_an01009/src/extensions/audiohw.xc
    :language: c
    :name: no_stream_optimisation
    :start-at: void AudioHwDeInit()
    :end-at: }


Using full-speed USB
====================

By switching to USB Audio Class one, ``lib_xua`` automatically uses full-speed USB when calling ``lib_xua``. This can be affected by
modifying ``xua_conf.h``.

 .. literalinclude:: ../../app_an01009/src/core/xua_conf.h
    :language: c
    :name: xua_audio_class
    :start-at: #ifdef LOW_POWER_ENABLE
    :end-at: #endif

This saves a little core power but a more significant amount of PHY power, at the expense of reducing the capabilities of the 
USB audio device by limiting it to 96 kHz which is the maximum for audio class one. 

|newpage|

******************
Power measurements
******************

I/O power
=========

I/O power is calculated to be as follows (note these are estimated) for USB full-speed
and high-speed operation:

.. tabularcolumns:: lrr

========================= ======================= ======================
Current                   FSRX (12 Mbit/s)        HSRX (480 Mbit/s)
========================= ======================= ======================
IVCC33A                   11-40 uA (negligible)   1 mA (3 mW)
IVCC18A                   4-5 mA (7-9 mW)         8 mA (14 mW)
Oscillator, 1.8V          1 mW                    1 mW
I²S power                 0.5 mw                  0.5 mw
DC-DC efficiency          90%                     90%
**Total**                 **11 mW**               **22 mW**
========================= ======================= ======================

Comparison of power optimisations
=================================

The tables below show the measured power consumption of `xcore.ai` running USB Audio
reference design software with different optimisations. The calculated I/O power is added to get
the total power consumption value (not including DAC or CODEC).

The `Configuration` column lists the low-power firmware changes and resultant power consumptions achieved.


Streaming USB Audio at 48 kHz
-----------------------------

.. tabularcolumns:: lrrr

======================================== =========== ========== ========
Configuration                            Core Power  I/O Power  Total
======================================== =========== ========== ========
Standard, 0.90V, 600 MHz, HS Class 2     200 mW       22 mW     222 mW
Standard + tile/switch clock reduction   150 mW       22 mW     172 mW
Standard + clock + event based buffer    105 mW       22 mW     127 mW
Standard + clock + buffer + thread mode   77 mW       22 mW      99 mW
Low-power, all optimisations, FS Class 1  73 mW       11 mW      84 mW
======================================== =========== ========== ========

.. note::
    The above powers *include* an estimated 90% efficiency for the DC-DC converters.
    Consequently the chip power is around 10% lower than the values shown. By selecting a 
    more efficient DC-DC converter, overall power consumption may be further reduced. 

.. note::
    The additional power required to stream at 192 kHz (only possible with Class 2 - 96 kHz limit for Class 1)
    is only a milliwatt or two.

.. note::
    In (device) receive only applications, such as USB audio output only sound cards, USB Tx
    power in the USB PHY will be minimal.

Idle (non-streaming) Audio
--------------------------

The additional power saved from non-streaming optimisations are limited because the `xcore` must
still communicate with the USB host requiring the XUD tile to be clocked at full rate.
However shutting down the audio subsystem, along with associated clocks,
provides a useful chip power reduction of around 10% when audio playback is halted compared with streaming at 48 kHz.

More significant system-power savings may be made however by using the non-streaming state callbacks to shut-down
external hardware, such as the DAC.

.. tabularcolumns:: lrrr

======================================================= =========== ========== ========
Configuration                                           Core Power  I/O Power  Total
======================================================= =========== ========== ========
FS Class 1, no idle optimisation, streaming @ 48kHz     73 mW       11 mW      84 mW
FS Class 1, no idle optimisation, idle (no streaming)   72 mW       10 mW      82 mW
FS Class 1, XUA idle optimisation, idle (no streaming)  64 mW       10 mW      74 mW
======================================================= =========== ========== ========

.. note::
    The above powers *include* an estimated 90% efficiency for the DC-DC converters.
    Consequently the chip power is around 10% lower than the values shown. By selecting a 
    more efficient DC-DC converter, overall power consumption may be further reduced. 



**************************************
Hardware for minimal power consumption
**************************************

This application measured the power on an `XK-AUDIO-316-MC` board, as that is commercially available
and has a 0.1 ohm resistor across the 5V input to the core power supply.

In order to build a design that uses minimal power the following steps should be taken, in order of
importance:

* Put all I/O on tile 0; in particular I²S and I²C, and build with tile 0 for I/O and ``lib_xud``.

* In the software, switch off tile 1 upon booting (see ``power_down.xc``) [#f1]_.

* Use a DC-DC converter to generate 1.8V from 5V for higher efficiency.

* Use 1.8V I/O (for example the xcore.ai `QF60A` part).

* Replace the xcore.ai internal master clock PLL with an external MCLK source. This will save
  a few milliwatts of xcore power at the expense of the power used by the external oscillator.

* Select a low-power DAC, or at a minimum, one that supports a low-power mode when not streaming.

* Use a DC-DC to generate 3.3V from 5V (power requirements on 3V3 are very little, so an LDO may
  be more efficient).

.. [#f1] Note this does *not* affect the secondary PLL output pin muxed with IO pin `X1D11` of
   tile[1] which continues to operate as MCLK output.


**********
Conclusion
**********

This application note shows how some simple design optimisations can be made to reduce overall
power consumption when streaming audio by approximately 55% (or 62% if USB audio class 1 is used) compared with the 
baseline USB audio class 2 reference design whilst still providing high-quality, bit-perfect USB audio streaming.

A further 10% of ``xcore.ai`` chip power may be saved when the device is enumerated, but not streaming, with the addition
of non-streaming power optimisations.

.. _further_reading:

***************
Further reading
***************

* `AN02022: xcore.ai Clock frequency control <www.xmos.com/file/an02022>`_

* `AN02023: xcore.ai Power consumption estimation <www.xmos.com/file/an02023>`_

* `AN02030: Improving IO response times using FAST or PRIORITY modes <www.xmos.com/file/an02030>`_

* `XU316-1024-QF60A datasheet <https://www.xmos.com/?s=XM-014034-PC>`_

* `The XS3 architecture manual <https://www.xmos.com/?s=XM-014007-PS>`_
