########################################################################
AN01009: Optimising USB Audio for stereo output, battery powered devices
########################################################################

This application note characterises the expected power usage of the XMOS
USB Audio reference design running on an `xcore.ai` device, configured for
stereo playback applications. This document then outlines optional changes
to the hardware and software, with the goal of reducing power consumption.

This application note assumes that the design comprises an `XMOS` device to
interface USB to an external DAC connected via I²S.

The USB Audio reference design is optimised for performance, configurability,
and low resource usage. The standard reference design
running on the `xcore.ai` device comfortably fits within the USB bus power envelope,
leaving plenty of power available for supporting components and audio CODECs.

When powering systems from a battery, a fixed amount of energy is available.
Reducing power dissipation allows the designer to either increase battery life or maintain the same
battery life with a smaller battery, resulting in cost and form factor savings.
By making different design choices and optimising the original `XMOS` USB Audio reference design,
it is possible to reduce power consumption.

This application note assumes that the reader is familiar with the
`The XS3 architecture manual <https://www.xmos.com/?s=XM-014007-PS>`_
and the `XMOS USB Audio reference design. <https://www.xmos.com/develop/usb-multichannel-audio/>`_

The described and provided application executes on the `XK-AUDIO-316-MC` board. This note concerns
itself with reducing the power consumption of the `xcore.ai` device only. However, the provided
optimisations also allow for significant power reductions within the supporting audio hardware.

.. warning::

    This application note describes steps for reducing power on an `XK-AUDIO-316-MC`
    board since it is readily and commercially available. However, the hardware arrangement of this
    board does not lend itself to an ideal low power system configuration. Compromises made, and details of
    an ideal configuration, are described in this document.

********
Overview
********

The power measurements quoted in this note were made using the following test harness:

- The `XK-AUDIO-316-MC` board has a jumper (J24) over which the 5V supply to the core power supply
  which is the main power draw of the chip, upstream of the DC-DC converter, can be monitored. Note
  that this excludes 5V supply to 3V3 and 1V8 pins.
- XMOS USB Audio library ``lib_xua`` version 5.1.0.
- Host: HP ProBook 430 G7 running Windows 11 23H2.

A diagram of the chip power measurement method is shown :numref:`fig_power_setup`. There are
multiple power domains within the `xcore.ai` device. In this application, all
power originates from USB `VBUS`, and is consumed as core power (0.9V nominal),
1.8V analog (for USB), 3.3V analog (for USB), and either 1.8 or 3.3V for
digital I/O. It is assumed that DC-DC converters with a reasonable
efficiency (not LDOs) are used.

The core voltage power consumption in the 5V domain is measured; the power
consumption of the other supplies is estimated based on characterisation data.

.. _fig_power_setup:

.. figure:: ../images/power-setup.*
            :width: 50%

            Test setup

For each configuration, basic enumeration and playback was confirmed whilst connected to the Windows
host, with power being measured during audio playback, idle (non-streaming) and during USB suspend
which was triggered by closing the lid of the laptop.

*******************
Example application
*******************

An accompanying example application (``app_an01009``) is provided along side this application note.

Three build configurations are provided; one with no power optimisations applied and two with all
power optimisations enabled - one for high-speed and one for full-speed operations. These
configurations allow quick comparison of the power between the baseline and fully optimised
versions.

Individual power optimisations may be enabled and disabled by following the steps in the
:ref:`sec_optimisations` section.

Building the example
====================

This section assumes you have downloaded and installed the `XMOS XTC tools <https://www.xmos.com/software-tools/>`_
(see `README` for required version).
Installation instructions can be found `here <https://xmos.com/xtc-install-guide>`_.

Be sure to pay attention to the section `Installation of required third-party tools
<https://www.xmos.com/documentation/XM-014363-PC-10/html/installation/install-configure/install-tools/install_prerequisites.html>`_.

The application uses the `xcommon-cmake <https://www.xmos.com/file/xcommon-cmake-documentation/?version=latest>`_
build system as bundled with the XTC tools. This system is based on `CMake <https://cmake.org/>`_

The ``an01009`` software zip-file should be downloaded and unzipped to a chosen directory.

To configure the build, run the following from an XTC command prompt::

    cd an01009
    cd app_an01009
    cmake -G "Unix Makefiles" -B build

All required dependencies are included in the software download, however, if any are missing it is
at this configure step that they will be downloaded by the build system.

Finally, the application binaries can be built using ``xmake``::

    xmake -j -C build

This command will cause binaries (.xe files) to be generated in relevant subdirectories of the
`app_an01009/bin` directory, one for each of the build configurations.

For subsequent builds, the ``cmake`` step can be omitted.

If `CMakeLists.txt` or other `CMake` configuration files have been modified, ``xmake`` will
automatically trigger ``cmake`` to regenerate the build system as required.

Launching the example
=====================

From a XTC command prompt run the following command for the unoptimised firmware::

    xrun bin/std/app_an01009_std.xe

or for the low-power optimised firmware running High-Speed USB (supporting >96 kHz sample rate)::

    xrun bin/lp/app_an01009_lp.xe

or for the low-power optimised firmware running Full-Speed (supporting up to <= 96 kHz sample rate)::

    xrun bin/lp/app_an01009_lp_fs.xe

Once this command has executed the device should have enumerated on the host machine, and you may stream audio.

.. _sec_optimisations:

*************
Optimisations
*************

This note applies a number of different optimisations to the reference design. The impact of each
is reported following measurement. These optimisations can be grouped into the following categories:

* **Reducing frequencies of unused resources**
  Execute all the software on one physical tile. This aids active and non-streaming power consumption.
  The `xcore` switch and other tile can both be slowed down. In this case, the frequency of tile[0]
  is reduced to 9 MHz which means it can still execute low speed tasks, such as I²C master -
  required to configure external audio DAC of the `XK-AUDIO-316-MC` board.
  The hardware that is used for measuring power is suboptimal in this regard since the I²S and I²C
  buses are connected to two separate physical tiles. An extra 3 mW can be saved in a custom
  hardware by switching the tile off rather than just reducing its frequency.

* **Event-based buffering**
  By default, for performance reasons, the USB Audio software buffering scheme uses some polled
  shared memory variables. For lower channel count designs, such as stereo DACs the design can
  be moved to use an event-based buffering scheme, aiding both active and non-streaming power
  consumption.
  This scheme ensures that as few instructions as possible are executed in the audio buffering
  subsystem by only checking shared memory variables when needed through use of a channel event.

* **XUD thread mode**
  This aids active and non-streaming power consumption.
  Disable `FAST` mode in ``XUD_Manager_loop`` in (``lib_xud``) and instead run the XUD thread in
  `HIGH PRIORITY` mode which ensures it always receives 1/5 of the tile MIPS. For further
  information about the operation of thread modes please refer to :ref:`further reading section<further_reading>`
  where a related application note is listed.

* **Audio shutdown when idle**
  This improves non-streaming power consumption and USB suspend mode.
  By setting ``XUA_LOW_POWER_NON_STREAMING`` to 1 in the ``CMakeLists.txt``, ``lib_xua`` supports shutting down of
  the audio subsystem (which includes I²S). An additional callback ``AudioHwShutdown()`` is enabled which allows the user to
  configure external hardware (eg. DAC) into low-power mode further saving system power. In
  addition, the on-chip Secondary PLL may be disabled (used in this application to provide the
  master clock) which further saves power draw by the `xcore`.

* **Using full-speed USB**
  This helps active and non-streaming power consumption. It provides a reduction of power through
  use of full speed USB rather than high-speed. This is relevant since it affects the PHY power
  consumed.

* **Extreme chip power down in USB Suspend**
  When the `xcore` receives a suspend notification from the host it is possible to reduce power
  significantly to a point where the `xcore` power draw is significantly below the USB Suspend
  specification of <= 2.5 mA from the bus by clocking the whole device down to just a few MHz.

**************
Implementation
**************

This section describes the steps taken to implement the changes outlined in :ref:`sec_optimisations`.

The power optimisations are all handled by two files:

    - ``audiohw.xc`` which takes care of configuring the external audio hardware, on-chip master clock PLL and makes calls to ``power_down.xc`` to reduce active mode `xcore` power.

- ``power_down.xc`` which contains the `xcore` functions to reduce on-chip frequencies of various blocks as well as the callback implementation for USB suspend.

Configuring `lib_xua`
=====================

The `lib_xua` library can be configured by an application either setting the appropriate defines
in the ``CMakeLists.txt`` file or by setting defines in ``xua_conf.h`` file.

For example, setting ``XUD_USB_BUS_SPEED`` to ``1``, which forces Full-Speed operation, can be done in the application
``CMakeLists.txt`` file as follows::

    set(APP_COMPILER_FLAGS -DXUA_USB_BUS_SPEED=1)

or in a ``xua_conf.h`` file as follows::

    #define XUA_USB_BUS_SPEED 1

Reducing frequencies
====================

The provided source file ``src/extensions/power_down.xc`` contains a function which is run at audio
hardware initialisation to reduce the active power consumption.

The following clock divider reduces the System PLL frequency of 600 MHz to 120 MHz
for the switch and reduces the System PLL frequency of 600 MHz to 9 MHz
for tile[0], which is enabled by the write to the ``XS1_PS_XCORE_CTRL0`` register:
:

.. literalinclude:: ../../app_an01009/src/extensions/audiohw.xc
   :start-at:     // Active power mode savings
   :end-at: }

Choosing a slow, but still functional, tile speed of 9 MHz allows the I²C master task and remote board control task on that tile
to still function, albeit slowly. This includes sample rate changes which require I²C configuration of the DAC.

If no functions are implemented in the unused tile then there is no reason not to enable this optimisation.

These optimisations can be enabled or disabled as required to test the power consumption
by adjusting the following define in `CMakeLists.txt`::

    -DAN01009_CLOCK_DOWN_SWITCH_AND_UNUSED_TILE=1

.. note::

   Due to the I/O arrangement of the `XK-AUDIO-316-MC` the choice is made to run the software on
   tile[1]. A realistic design would choose to run on tile[0] due to the boot flash being connected
   to this tile - thus allowing DFU to operate etc.


Event-based audio buffer
========================

By default, ``lib_xua`` uses a performance and resource optimised audio buffer. Part of this buffer
consists of a polling loop which monitors shared-memory variables. This polling loop is always
executing instructions and therefore consumes power at all times.

``lib_xua`` includes an option to add a channel between the two buffer threads which consumes
two channel-ends but pauses the `decouple` thread until a shared-memory variable needs reading.
Blocking on a channel de-schedules the thread and therefore saves a useful amount of power.

Highly featured designs (especially those including digital inputs or outputs) may not have
sufficient channel-end resources to implement this power-saving feature (resulting in a linker error)
however simpler designs such as DACs, microphones or headphones can safely enable this feature.

The following define in the application in ``CMakeLists.txt`` enables the event-based audio buffer::

    -DXUA_CHAN_BUFF_CTRL=1

XUD thread mode
===============

XUD thread normally runs in `fast` mode which improves IO timings in the USB device library.
However it also increases power consumption because the thread is always scheduled, even when waiting on an event.
In low-power USB audio applications it can be acceptable to disable fast mode.

To do this, the following define is set in the application  ``CMakeLists.txt``::

    -DXUD_THREAD_MODE_FAST_EN=0

In addition, to ensure that XUD always receives sufficient MIPS in the cases where more than 5 hardware threads
are used on same tile as XUD, the following define is also set in the application ``CMakeLists.txt``::

    -DXUD_PRIORITY_HIGH=1

Please see the :ref:`further reading <further_reading>` for more information regarding `xcore` thread modes.

Idle mode when not streaming
============================

By default ``lib_xua`` keeps I²S running even when audio is not streaming. This is useful when external systems rely on the
audio clocks or features such as the audio mixer need to keep operating. For some applications, it is preferable to stop I²S
and shutdown any associated audio hardware, which can be done using the following define::

    -DXUA_LOW_POWER_NON_STREAMING=1

The associated shutdown callback, which is enabled by this setting, can be seen populated for this application note below.
Note ``lib_xua`` disables the I²S ports prior to this and the callback handler in this application
then disables the Application PLL which disables MCLK generation.

 .. literalinclude:: ../../app_an01009/src/extensions/audiohw.xc
    :language: c
    :name: no_stream_optimisation
    :start-at: void AudioHwShutdown()
    :end-at: } // End of audio shutdown

Using full-speed USB
====================

By default ``lib_xua`` will use USB Audio Class 2.0 and request to run at high-speed. Limiting to
full-speed can be achieved by setting ``XUA_USB_BUS_SPEED`` to ``1`` (``2`` for high-speed).

This saves a little core power but a more significant amount of PHY power, at the expense of
reducing the capabilities of the USB audio device by limiting it to 96 kHz which is the maximum
for the given bus bandwidth.


Extreme chip power down in USB Suspend
======================================

Typically the `xcore` must be clocked at a nominal rate when USB is enabled. This is because the inner loop of `lib_xud` must
communicate with the PHY at a rate of 60 MHz. This is the case even when the device is enumerated but not streaming because it
still needs to respond to traffic from the host.

However, when the host issues a suspend notification (which is typically done when the host sleeps) it is possible for the
`xcore` to enter a very low power state since it need only monitor the D+ and D- line state for a resume notification.

To exploit this, code is provided which performs the following steps:

- Ensure the audio hardware is disabled and powered down and I²S is halted and the MCLK PLL is disabled.
  Requires ``XUA_LOW_POWER_NON_STREAMING`` to be set.
- Disable the core PLL and bypass it so that the 24 MHz XTAL is used as the core clock source
- Further clock down the chip by a factor of 10 from the XTAL so that the maximum on-chip clock is 2.4 MHz, which is fast enough to receive the resume notification but draws power close to the static power consumption.
- Put the on-chip PHY in suspend mode

On USB resume, the chip is powered up in the reverse order of the above list and is immediately ready to receive a stream start from the host and play audio.

This power saving feature is enabled by modifying ``CMakeLists.txt``::

    -DAN01009_CLOCK_DOWN_CHIP_IN_SUSPEND=1

******************
Power measurements
******************

I/O power
=========

I/O power is calculated to be as follows (note these are estimated) for USB full-speed
and high-speed operation:

.. tabularcolumns:: lrr

========================= ======================= ======================
Current                   FSRX (12 Mbit/s)        HSRX (480 Mbit/s)
========================= ======================= ======================
IVCC33A                   11-40 uA (negligible)   1 mA (3 mW)
IVCC18A                   4-5 mA (7-9 mW)         8 mA (14 mW)
Oscillator, 1.8V          1 mW                    1 mW
I²S power                 0.5 mW                  0.5 mW
**Total**                 **10 mW**               **19 mW**
========================= ======================= ======================

Comparison of power optimisations
=================================

The tables below show the measured power consumption of `xcore.ai` running USB Audio
reference design software with different optimisations. The calculated I/O power is added to get
the total power consumption value (not including DAC, CODEC, or power
supply inefficiencies).

The `Configuration` column lists the low-power firmware changes and resultant power consumptions achieved.


Streaming USB Audio at 48 kHz
-----------------------------

.. tabularcolumns:: lrrr

======================================== =========== ========== ========
Configuration                            Core Power  I/O Power  Total
======================================== =========== ========== ========
Standard, 0.90V, 600 MHz, high-speed USB 182 mW       19 mW     201 mW
Standard + tile/switch clock reduction   136 mW       19 mW     155 mW
Standard + clock + event based buffer     95 mW       19 mW     114 mW
Standard + clock + buffer + thread mode   70 mW       19 mW      89 mW
Low-power, all optimisations, full-speed  66 mW       10 mW      76 mW
======================================== =========== ========== ========

.. note::
    The additional power required to stream at 192 kHz, 24 bit (only possible with USB HS - 96 kHz, 24 bit limit for FS USB)
    is only 1-2 mW.

.. note::
    In playback only applications, such as USB audio output only sound cards, USB Tx
    power in the USB PHY will be minimal.

Idle (non-streaming) Audio
--------------------------

The additional power saved from non-streaming optimisations are limited because the `xcore` must
still communicate with the USB host requiring the XUD tile to be clocked at full rate.

However shutting down the audio subsystem, along with associated clocks,
provides a useful chip power reduction of around 10 - 13% when audio playback is halted, compared with streaming at 48 kHz.

More significant system-power savings may be made however by using the non-streaming state callbacks to shut-down
external hardware, such as the DAC.

.. tabularcolumns:: lrrr

======================================================= =========== ========== ========
Configuration                                           Core Power  I/O Power  Total
======================================================= =========== ========== ========
FS Class 2, no idle optimisation, streaming @ 48kHz     66 mW       10 mW      76 mW
FS Class 2, no idle optimisation, idle (no streaming)   65 mW        9 mW      74 mW
FS Class 2, XUA idle optimisation, idle (no streaming)  58 mW        9 mW      67 mW
FS Class 2, USB Suspend                                  8 mW        2 mW      10 mW
======================================================= =========== ========== ========


**************************************
Hardware for minimal power consumption
**************************************

This application note reports measured power on an `XK-AUDIO-316-MC` board, as that is
commercially available and has a 0.1 ohm resistor across the 5V input to the core power supply.

In order to build a design that uses minimal power the following steps should be taken, in order of
importance:

* Place all I/O on tile 0; in particular I²S and I²C, and build with tile 0 for I/O and ``lib_xud``.

* Switch off tile 1 upon booting (see ``power_down.xc``) [#f1]_.

* Use a DC-DC converter to generate 1.8V from 5V for higher efficiency.

* Use 1.8V I/O (for example the xcore.ai `QF60A` part).

* Replace the `xcore.ai` internal master clock PLL with an external MCLK source. This will save
  a few milliwatts of `xcore` power at the expense of the power used by the external oscillator.

* Select a low-power DAC, or at a minimum, one that supports a low-power mode when not streaming.

* Use a DC-DC to generate 3.3V from 5V (power requirements on 3V3 are very little, so an LDO may
  be more efficient).

* Allow external audio hardware (e.g. DACs) to be power switched via an `xcore` IO pin

.. [#f1] Note this does *not* affect the secondary PLL output pin muxed with IO pin `X1D11` of
   tile[1] which continues to operate as MCLK output.

***************************
Reporting power consumption
***************************

The `bMaxPower` field in the USB Configuration Descriptor specifies the maximum amount of current
the device will draw from the USB bus when operating in bus-powered mode. Its value is expressed
in units of 2 milliamps (mA), meaning a `bMaxPower` value of 50 corresponds to 100 mA.
This field allows the host to manage power distribution among connected devices and ensure that
overall power limits are not exceeded. For self-powered devices, bMaxPower should still reflect
any power drawn from the bus, even if the main power comes from an external source.

By default the `XMOS USB Audio Reference Design` sets the `bMaxPower` field to 500 mA (250) for
bus-powered devices, which is the maximum allowed by the USB specification for a bus-powered device.
For self-powered devices the `bMaxPower` field is set to 0 by default.

When optimising for low power, the `bMaxPower` field should be set to the maximum expected current
draw. This can be done by setting ``XUA_BMAX_POWER`` in the ``CMakeLists.txt`` file. For example::

    -DXUA_BMAX_POWER=125 #250 mA

.. note::

   If a device is to correctly operate connected to a bus-powered USB hub, the `bMaxPower` field
   must not be set to a value representing more than 100 mA as this is the maximum current a bus
   powered USB 2.0 hub can provide on each port.

**********
Conclusion
**********

This application note shows how a variety of design optimisations can be made to reduce overall
power consumption, when streaming audio, by approximately 55% (or 62% if full-speed USB is used)
compared with the baseline USB Audio Reference Design, whilst still providing high-quality,
bit-perfect USB audio playback.

A further 10 to 13% of ``xcore.ai`` device power may be saved when the device is enumerated, but
not streaming, with the inclusion of non-streaming power optimisations. Additionally the system
power can be dramatically reduced by powering down the external audio hardware during the
stream-stop state.

During USB suspend, the `xcore.ai` device power may be reduced to well below the nominal
15 milliwatts required by the USB specification.

.. _further_reading:

***************
Further reading
***************

* `AN02022: xcore.ai Clock frequency control <www.xmos.com/file/an02022>`_

* `AN02023: xcore.ai Power consumption estimation <www.xmos.com/file/an02023>`_

* `AN02030: Improving IO response times using FAST or PRIORITY modes <www.xmos.com/file/an02030>`_

* `XU316-1024-QF60A datasheet <https://www.xmos.com/?s=XM-014034-PC>`_

* `USB Multichannel Audio Evaluation Kit <https://www.xmos.com/xk-audio-316-mc-ab>`_

* `The XS3 architecture manual <https://www.xmos.com/?s=XM-014007-PS>`_

